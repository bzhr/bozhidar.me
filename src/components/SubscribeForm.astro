---
interface Props {
  title?: string;
  description?: string;
}

const { title = 'Subscribe to the newsletter', description = "Get new posts and updates directly in your inbox." } = Astro.props as Props;
---

<section class="subscribe">
  <h2>{title}</h2>
  <p class="desc">{description}</p>

  <form class="subscribe-form" method="POST" action="/.netlify/functions/subscribe">
    <input
      type="email"
      name="email"
      placeholder="Enter your email"
      required
      autocomplete="email"
      aria-label="Email address"
    />
    <input
      type="text"
      name="name"
      placeholder="Your name (optional)"
      autocomplete="name"
      aria-label="Name (optional)"
    />
    <!-- Honeypot field to deter bots -->
    <input type="text" name="company" tabindex="-1" autocomplete="off" class="hp" aria-hidden="true" />
    <button type="submit">Subscribe</button>
    <p class="help">No spam. Unsubscribe anytime.</p>
    <p class="msg" data-status hidden></p>
  </form>
</section>

<script>
  // Progressive enhancement: submit via fetch for nicer UX
  const form = document.currentScript?.previousElementSibling?.querySelector?.('form') ?? document.querySelector('.subscribe-form');
  if (form) {
    form.addEventListener('submit', async (e) => {
      // Intercept only if fetch is available
      if (!window.fetch) return;
      e.preventDefault();
      const msg = form.querySelector('.msg');
      const btn = form.querySelector('button');
      if (!msg || !btn) return;
      msg.hidden = false;
      msg.dataset.status = 'pending';
      msg.textContent = 'Subscribingâ€¦';
      btn.disabled = true;

      try {
        // Prefer URL-encoded body to avoid multipart parsing in the function
        const formData = new FormData(form);
        const params = new URLSearchParams();
        for (const [k, v] of formData.entries()) {
          params.append(k, typeof v === 'string' ? v : '');
        }
        const res = await fetch(form.action, {
          method: 'POST',
          headers: {
            'Accept': 'application/json',
            'Content-Type': 'application/x-www-form-urlencoded;charset=UTF-8',
          },
          body: params.toString(),
        });
        const data = await res.json().catch(() => ({}));
        if (res.ok && data?.success) {
          msg.dataset.status = 'success';
          msg.textContent = data.message || 'Thanks! Please check your inbox.';
          form.reset();
        } else {
          msg.dataset.status = 'error';
          msg.textContent = data?.error || 'Subscription failed. Please try again later.';
        }
      } catch (err) {
        msg.dataset.status = 'error';
        msg.textContent = 'Network error. Please try again.';
      } finally {
        btn.disabled = false;
      }
    });
  }
</script>

<style>
  .subscribe {
    margin-top: 3rem;
    padding: 1.25rem;
    border: 1px solid var(--border-color);
    border-radius: 0.75rem;
    background: var(--background);
  }
  .subscribe h2 {
    margin: 0 0 0.25rem 0;
    font-size: 1.25rem;
  }
  .subscribe .desc {
    margin: 0 0 1rem 0;
    color: var(--text-secondary);
    font-size: 0.95rem;
  }
  .subscribe-form {
    display: grid;
    grid-template-columns: 1fr 1fr auto;
    gap: 0.5rem;
    align-items: center;
  }
  .subscribe-form input[type="email"],
  .subscribe-form input[name="name"] {
    padding: 0.6rem 0.75rem;
    border: 1px solid var(--border-color);
    border-radius: 0.5rem;
    background: var(--background);
    color: var(--text-primary);
  }
  .subscribe-form button {
    padding: 0.6rem 0.9rem;
    border-radius: 0.5rem;
    border: 1px solid transparent;
    background: var(--accent);
    color: white;
    cursor: pointer;
  }
  .subscribe-form button:disabled { opacity: 0.7; cursor: not-allowed; }
  .subscribe-form .help {
    grid-column: 1 / -1;
    margin: 0.25rem 0 0;
    color: var(--text-secondary);
    font-size: 0.85rem;
  }
  .subscribe-form .msg {
    grid-column: 1 / -1;
    margin: 0.25rem 0 0;
    font-size: 0.9rem;
  }
  .subscribe-form .msg[data-status="pending"] { color: var(--text-secondary); }
  .subscribe-form .msg[data-status="success"] { color: #16a34a; }
  .subscribe-form .msg[data-status="error"] { color: #dc2626; }
  .subscribe-form .hp { position: absolute; left: -10000px; width: 1px; height: 1px; opacity: 0; }
  @media (max-width: 720px) {
    .subscribe-form { grid-template-columns: 1fr; }
  }
</style>
